#
# Copyright 2024 Valkyrie Systems Corporation
#
# Licensed under MIT License.  See LICENSE.
#
import itertools
import logging

import pytest

import sarpy.io.product.sidd1_elements.ExploitationFeatures as ef1


POLS = ('V', 'H', 'RHC', 'LHC', 'OTHER')

@pytest.mark.parametrize(('txpol', 'rcvpol'), itertools.product(POLS, POLS))
def test_txrcvpolarization(txpol, rcvpol, caplog):
    with caplog.at_level(logging.INFO, 'sarpy.io.xml.descriptors'):
        ef1.TxRcvPolarizationType(TxPolarization=txpol, RcvPolarization=rcvpol)
        assert not caplog.records


@pytest.mark.parametrize(('txpol', 'rcvpol'), itertools.product(POLS, POLS))
def test_txrcvpolarization_from_sicd_nominal(txpol, rcvpol):
    sicd_str = f'{txpol}:{rcvpol}'
    txp = ef1.TxRcvPolarizationType.from_sicd_value(sicd_str)
    assert txp.TxPolarization == txpol
    assert txp.RcvPolarization == rcvpol


@pytest.mark.parametrize(('sicd_str', 'expected'), 
                         [(None, ('OTHER', 'OTHER')),
                          ('OTHER', ('OTHER', 'OTHER')),
                          ('UNKNOWN', ('OTHER', 'OTHER')),
                          ('X:Y', ('OTHER', 'OTHER')),
                          ('E:S', ('OTHER', 'OTHER')),
                          ('OTHER_CUSTOM1:OTHER_CUSTOM2', ('OTHER', 'OTHER')),
                         ])
def test_txrcvpolarization_from_sicd_other(sicd_str, expected):
    txp = ef1.TxRcvPolarizationType.from_sicd_value(sicd_str)
    assert txp.TxPolarization == expected[0]
    assert txp.RcvPolarization == expected[1]


def test_txrcvpolarization_from_sicd_error():
    with pytest.raises(TypeError):
        ef1.TxRcvPolarizationType.from_sicd_value(0)

